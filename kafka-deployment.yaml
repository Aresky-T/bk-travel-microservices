version: '3.7'
services:
  zookeeper-01:
    image: confluentinc/cp-zookeeper:7.6.0
    hostname: zookeeper-01
    container_name: zookeeper-01
    ports:
    - "2181:2181"
    - "32181:32181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      # Định nghĩa các máy chủ trong cluster, bao gồm chính là zookeeper-01, 2 zookeeper phụ là zookeeper-02,zookeeper-03
      # Port 2888: sử dụng cho giao tiếp giữa các zookeeper server
      # Port 3888: sử dụng cho giao tiếp giữa client và zookeeper server
      ZOOKEEPER_SERVERS: zookeeper-01:2888:3888
    networks:
    - bk-travel-ms-network
  kafka-broker-01:
    # image: confluentinc/cp-kafka:7.5.3
    image: confluentinc/cp-server:7.6.0
    hostname: kafka-broker-01
    container_name: kafka-broker-01
    depends_on:
    - zookeeper-01
    ports:
    - "9092:9092" # cho phép giao tiếp giữa client với broker server
    - "29092:29092" # cho phép giao tiếp giữa các broker container trong 1 cluster container (không phải cluster broker)
    - "9999:9999" # cho phép truy cập JMX thông qua port 9999
    - "19092:19092" # cho phép giao tiếp giữa các broker trong cluster thông qua giao thức INTERNAL của listener
    environment:
      # Thiết lập ID cho BROKER
      KAFKA_BROKER_ID: 1
      # Chỉ định zookeeper để lưu metadata và state của broker
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-01:2181
      # Định nghĩa các giao thức và địa chỉ mà broker quảng bá cho các producer và consumer khi chúng kết nối tới
      # Format: <listener_name>://<hostname>:<port>
      # INTERNAL://kafka-broker-01:9092 - Listener nội bộ cho giao tiếp giữa các container
      # EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092 - Listener bên ngoài cho phép các client bên ngoài truy cập kafka thông qua host của container
      # DOCKER://host.docker.internal:29092 - Listener cho phép giao tiếp giữa các Kafka container trong cluster docker
      # KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:9092,PLAINTEXT_HOST://localhost:29092
      # PLAINTEXT://kafka-broker-01:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-broker-01:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      # Thiết lập giao thức bảo mật cho từng loại listener, trong trường hợp này tất cả đều dùng PLAINTEXT (không mã hoá)
      # KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      # Chỉ định listener dùng cho giao tiếp giữa các broker, trong trường hợp này là INTERNAL
      # KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      #  Chỉ định thời gian delay trước khi Kafka phải phân phối lại các partition giữa các thành viên của nhóm (các consumer trong group) để đảm bảo mỗi partition chỉ được tiêu thụ bởi một tiến trình duy nhất.
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      # Thiết lập logger cho các thành phần controller, producer, state trong kafka
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      # Thiết lập số lượng replica tối thiểu cho nhật ký trạng thái giao dịch (transaction state log) cần phải có để tiếp tục hoạt động
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      # Thiết lập port và hostname cho JMX của Kafka để quản lý và giám sát
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      # Chỉ định class implement cho Kafka Authorizer, dùng để kiểm soát quyền truy cập của người dùng đối với các tài nguyên kafka,
      # nếu không tìm thấy class này thì vẫn cho phép mọi người truy cập
      # KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
      # Chỉ định số bản sao cho các cấu hình liên quan đến topic
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
       # Cấu hình các báo cáo về các metric của broker tới các hệ thống giám sát (monitoring systems) bên ngoài.
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka-broker-01:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    networks:
    - bk-travel-ms-network
  kafka-control-center:
    # image: confluentinc/cp-enterprise-control-center:5.1.4
    image: confluentinc/cp-enterprise-control-center:7.6.0
    container_name: kafka-control-center
    ports:
    - "9021:9021"
    depends_on:
    - kafka-broker-01
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: kafka-broker-01:29092
      CONTROL_CENTER_ZOOKEEPER_CONNECT: zookeeper-01:32181
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      CONTROL_CENTER_CONNECT_CLUSTER: cluster-01
    networks:
    - bk-travel-ms-network
    volumes:
    - kafka-control-center-volume:/var/lib/confluent-control-center
networks:
  bk-travel-ms-network:
    name: bk-travel-ms-network
    driver: bridge
    external: true
volumes:
  kafka-control-center-volume:
    name: kafka-control-center-volume
    
# docker volume create kafka-control-center-volume
# docker network create my-ubuntu-kafka-network

# docker-compose -f ./kafka-deployment.yaml up rm -s -f zookeeper-01

# docker-compose -f ./kafka-deployment.yaml up -d zookeeper-01
# docker-compose -f ./kafka-deployment.yaml up -d zookeeper-02
# docker-compose -f ./kafka-deployment.yaml up -d zookeeper-03

# docker-compose -f ./kafka-deployment.yaml up -d kafka-broker-01
# docker-compose -f ./kafka-deployment.yaml up -d kafka-broker-02
